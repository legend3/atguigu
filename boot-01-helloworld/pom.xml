<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.atguigu</groupId>
    <artifactId>boot-01-helloworld</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!-- 指定打包方式，默认：jar   -->
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
    </properties>
    <!--  要使用springboot的功能就引入springboot父项目：几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制
          意义：此后以后的依赖都无需写版本号，也避免依赖包版本冲突！
      -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.2</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

<!--    <properties>-->
<!--        &lt;!&ndash;   ——就近依赖原则(在dependencies前)-->
<!--                修改默认提供的依赖包的版本:-->
<!--                    1、查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。-->
<!--                    2、在当前项目里面重写配置-->
<!--                        maven属性-slf4j.version:   默认1.7.32,修改为: 1.7.31-->
<!--             &ndash;&gt;-->
<!--        <slf4j.version>1.7.31</slf4j.version>-->
<!--    </properties>-->

    <dependencies>
        <!--开发导入starter场景启动器:
            非常多的starter

            1、spring-boot-starter-x: x代表某种场景！
                引入了哪些场景这个场景的自动配置才会开启
                SpringBoot所有的自动配置功能都在spring-boot-starter-web -> spring-boot-starter-> spring-boot-autoconfigure 包里面
            2、只要引入starter-*，这个场景的所有常规需要的依赖我们都自动引入，例如starter-web,自动引入所有web开发依赖的jar
            3、SpringBoot所有支持的场景:
                https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter
            4、*-spring-boot-starter： 第三方(自定义的jar)为我们提供的简化开发的场景启动器。
            5、所有场景启动器最底层的依赖
            <dependency>
              <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>2.6.1</version>
              <scope>compile</scope>
            </dependency>
            -->
    <!--   开发web就引入spring的web场景依赖     -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!--   引入插件lmbok: 简化实体类     -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--   重启、重编译-配合(build project)ctrl+F9     -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.slf4j</groupId>-->
<!--            <artifactId>slf4j-api</artifactId>-->
<!--        </dependency>-->

    <!--        引入非版本仲裁的jar，要写版本号！-->
<!--        <dependency>-->
<!--            <groupId>org.ngrinder</groupId>-->
<!--            <artifactId>ngrinder-runtime</artifactId>-->
<!--            <version>3.5.5-p1</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-json</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.codehaus.groovy/groovy -->
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy</artifactId>
            <version>3.0.7</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>
    <build>
    <!--    打包插件-"fat jar": 把项目打成jar包，直接在目标服务器执行即可
            spring-boot-maven-plugin插件:
            - 可以打成直接运行的Jar包
                当运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“Java -jar”命令就可以直接运行。
            - 可以引入依赖包
                能够以Maven的方式为应用提供Spring Boot的支持,在打Jar包时会引入依赖包,一般的maven项目的打包命令，
                不会把依赖的jar包也打包进去的，只是会放在jar包的同目录下，能够引用就可以了，但是spring-boot-maven-plugin插件，
                会将依赖的jar包全部打包进去。
         -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.2</version>
            </plugin>
        </plugins>
    </build>
</project>